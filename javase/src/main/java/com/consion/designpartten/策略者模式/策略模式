定义：定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。
封装：Context，就是将算法封装类
互换:符合里氏替换原则，都实现了同一个接口，可以互换

Context:上下文角色，其承上启下作用，对下层封装，屏蔽高层对策略，算法的直接访问，封装可能存在的变化。
Strategy:抽象策略角色，
ConcreteStrategy：具体的策略角色
代理模式和策略模式的区别：策略类和封装类不用实现同一个接口，如果实现了同一个接口，那么就是代理模式了。

优点：
    1.算法可以自由切换
    2.避免使用多重条件判断，将判断抛到调用方。
    3.扩展性良好，只要实现策略接口，就是算法家族的一员。

缺点：
    1.策略类数量增多。
    2.所有的策略类都需要对外暴漏，上层必须要知道所有的策略才能决定到底使用哪个，违背迪米法则。

使用场景：
    1.多个类，只有在算法或者行为上稍有不同的场景。
    2.算法需要自由切换的场景，算法的使用是由使用者决定的。
    3.需要屏蔽算法规则的场景，算法太多，简明之一。

注意事项：
    1.如果策略数量超过4个，则考虑使用混合模式，解决策略类膨胀和对外暴漏的问题

扩展：策略枚举